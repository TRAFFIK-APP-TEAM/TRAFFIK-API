// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TRAFFIK_API.Data;

#nullable disable

namespace TRAFFIK_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251025002229_AddVehicleLicensePlateColumnOnly")]
    partial class AddVehicleLicensePlateColumnOnly
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TRAFFIK_API.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("BookingTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("CarModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceCatalogId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("VehicleLicensePlate")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CarModelId");

                    b.HasIndex("ServiceCatalogId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleLicensePlate");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.BookingStages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("BookingStages");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.CarModelService", b =>
                {
                    b.Property<int>("CarModelId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceCatalogId")
                        .HasColumnType("integer");

                    b.Property<string>("VehicleLicensePlate")
                        .HasColumnType("text");

                    b.HasKey("CarModelId", "ServiceCatalogId");

                    b.HasIndex("ServiceCatalogId");

                    b.HasIndex("VehicleLicensePlate");

                    b.ToTable("CarModelServices");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.CarTypeServices", b =>
                {
                    b.Property<int>("CarTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceCatalogId")
                        .HasColumnType("integer");

                    b.Property<string>("VehicleLicensePlate")
                        .HasColumnType("text");

                    b.HasKey("CarTypeId", "ServiceCatalogId");

                    b.HasIndex("ServiceCatalogId");

                    b.HasIndex("VehicleLicensePlate");

                    b.ToTable("CarTypeServices");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.Payments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<bool>("Redeemed")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.RewardItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RewardItems");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.RewardRedemption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RedeemedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Used")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("RewardRedemptions");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.ServiceCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CarTypeId");

                    b.ToTable("ServiceCatalogs");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.ServiceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarModelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ServiceCatalogId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("VehicleLicensePlate")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CarModelId");

                    b.HasIndex("ServiceCatalogId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleLicensePlate");

                    b.ToTable("ServiceHistories");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.Vehicle", b =>
                {
                    b.Property<string>("LicensePlate")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("LicensePlate");

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.Booking", b =>
                {
                    b.HasOne("TRAFFIK_API.Models.CarModel", "CarModel")
                        .WithMany("Bookings")
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAFFIK_API.Models.ServiceCatalog", "ServiceCatalog")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceCatalogId");

                    b.HasOne("TRAFFIK_API.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAFFIK_API.Models.Vehicle", null)
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleLicensePlate");

                    b.Navigation("CarModel");

                    b.Navigation("ServiceCatalog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.BookingStages", b =>
                {
                    b.HasOne("TRAFFIK_API.Models.Booking", "Booking")
                        .WithMany("BookingStages")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAFFIK_API.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.CarModel", b =>
                {
                    b.HasOne("TRAFFIK_API.Models.VehicleType", "CarType")
                        .WithMany("CarModels")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAFFIK_API.Models.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.CarModelService", b =>
                {
                    b.HasOne("TRAFFIK_API.Models.CarModel", "CarModel")
                        .WithMany("CarModelServices")
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAFFIK_API.Models.ServiceCatalog", "ServiceCatalog")
                        .WithMany("CarModelServices")
                        .HasForeignKey("ServiceCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAFFIK_API.Models.Vehicle", null)
                        .WithMany("CarModelServices")
                        .HasForeignKey("VehicleLicensePlate");

                    b.Navigation("CarModel");

                    b.Navigation("ServiceCatalog");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.CarTypeServices", b =>
                {
                    b.HasOne("TRAFFIK_API.Models.VehicleType", "CarType")
                        .WithMany("CarTypeServices")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAFFIK_API.Models.ServiceCatalog", "ServiceCatalog")
                        .WithMany("CarTypeServices")
                        .HasForeignKey("ServiceCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAFFIK_API.Models.Vehicle", null)
                        .WithMany("CarTypeServices")
                        .HasForeignKey("VehicleLicensePlate");

                    b.Navigation("CarType");

                    b.Navigation("ServiceCatalog");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.Notifications", b =>
                {
                    b.HasOne("TRAFFIK_API.Models.Booking", "Booking")
                        .WithMany("Notifications")
                        .HasForeignKey("BookingId");

                    b.HasOne("TRAFFIK_API.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.Payments", b =>
                {
                    b.HasOne("TRAFFIK_API.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.Review", b =>
                {
                    b.HasOne("TRAFFIK_API.Models.Booking", "Booking")
                        .WithMany("Reviews")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAFFIK_API.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.Reward", b =>
                {
                    b.HasOne("TRAFFIK_API.Models.User", "User")
                        .WithMany("Rewards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.RewardRedemption", b =>
                {
                    b.HasOne("TRAFFIK_API.Models.RewardItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.ServiceCatalog", b =>
                {
                    b.HasOne("TRAFFIK_API.Models.VehicleType", "CarType")
                        .WithMany("Services")
                        .HasForeignKey("CarTypeId");

                    b.Navigation("CarType");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.ServiceHistory", b =>
                {
                    b.HasOne("TRAFFIK_API.Models.CarModel", "CarModel")
                        .WithMany("ServiceHistories")
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAFFIK_API.Models.ServiceCatalog", "ServiceCatalog")
                        .WithMany()
                        .HasForeignKey("ServiceCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAFFIK_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAFFIK_API.Models.Vehicle", null)
                        .WithMany("ServiceHistories")
                        .HasForeignKey("VehicleLicensePlate");

                    b.Navigation("CarModel");

                    b.Navigation("ServiceCatalog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.Vehicle", b =>
                {
                    b.HasOne("TRAFFIK_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.Booking", b =>
                {
                    b.Navigation("BookingStages");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.CarModel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CarModelServices");

                    b.Navigation("ServiceHistories");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.ServiceCatalog", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CarModelServices");

                    b.Navigation("CarTypeServices");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Cars");

                    b.Navigation("Notifications");

                    b.Navigation("Reviews");

                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.Vehicle", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CarModelServices");

                    b.Navigation("CarTypeServices");

                    b.Navigation("ServiceHistories");
                });

            modelBuilder.Entity("TRAFFIK_API.Models.VehicleType", b =>
                {
                    b.Navigation("CarModels");

                    b.Navigation("CarTypeServices");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
